=begin pod
=NAME

C<Log::Dispatch::Msg> - log message class

=DESCRIPTION

This class represents a data structure holding information about a log entry.

=ATTRIBUTES

=head3 L<C<Instant>|https://docs.raku.org/type/Instant>C<:D $.timestamp>

The moment when message object has been produced

=head3 C<LOG-LEVEL:D $.level>

Message level provided with L<C<Log::Dispatch::Source>|Source.md> C<log> method call. Defaults to C<INFO>.

=head3 C<Str $.source>

If defined then holds the source name, as in L<C<Log::Dispatch::Source>|Source.md> C<$.LSN> attribute.

=head3 C<Mu @.msg>

The log message, as provided with L<C<Log::Dispatch::Source>|Source.md> C<log> method call. The list is maintained unmodified,
i.e. it represents the positional arguments of the call. For example, a call like:

=for code :lang<raku>
my $obj = Foo.new;
self.log: "Count: ", 42, " for object ", $obj, :debug;

would result in:

    ["Count: ", 42, " for object ", <instance of Foo>]

=METHODS

=head3 C<method fmt-level()>

Returns a formatted representation of message level which is just the level name left-padded with spaces to match the
longest level name length of 9 symbols.

=head3 C<method fmt-timestamp()>

Returns formatted timestamp in form of a string I<YYYY-MM-DD HH:MM::SS>.

=head3 C<method fmt-lines(--> Seq:D)>

Returns a sequence of lines representing the message object in the default log format which consists of:

    <date-time> [<padded level>] [<source name if present>] <a message line>

Date-time and level strings produced by C<fmt-timestamp> and C<fmt-level> methods correspondingly.

Message lines are produced by:

=item invoking C<gist> method on each element of C<@.msg> list
=item joining the resulting strings and then splitting them by new-lines
=item prefixing each resulting single line with date-time, level, and source name strings

In other words, if the log message consisted of something like:

    "Line 1\n", 42, "\nLine 3"

The the method would produce a sequence of three lines:

    1970-01-31 01:02:03 [     INFO] Line 1
    1970-01-31 01:02:03 [     INFO] 42
    1970-01-31 01:02:03 [     INFO] Line 3

So, if one has a multi-line output to be logged they must not be worried about it and can just submit it into the
dispatcher as-is.

=head1 SEE ALSO

L<C<Log::Dispatch>|../Dispatch.md>, L<C<Log::Dispatch::Source>|Source.md>, L<C<Log::Dispatch::Destination>|Destination.md>

=AUTHOR Vadim Belman <vrurg@cpan.org>

=end pod